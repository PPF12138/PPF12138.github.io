<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>firstblood</title>
    <url>/2022/11/26/firstblood/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在声明变量之前，咱们先了解下变量的数据类型，这篇文章主要涉及 字符串、布尔、数字，其他类型后面开篇再说。</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p><code>string</code></p>
<p>只能用一对双引号（””）或反引号（&#96;&#96;）括起来定义，不能用单引号（’’）定义！</p>
<h4 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h4><p><code>bool</code></p>
<p>只有 true 和 false，默认为 false。</p>
<h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><p><strong>整型</strong></p>
<p><code>int8</code> <code>uint8</code> </p>
<p><code>int16</code> <code>uint16</code></p>
<p><code>int32</code> <code>uint32</code></p>
<p><code>int64</code> <code>uint64</code></p>
<p><code>int</code> <code>uint</code>，具体长度取决于 CPU 位数。</p>
<p><strong>浮点型</strong></p>
<p><code>float32</code> <code>float64</code></p>
<h2 id="常量声明"><a href="#常量声明" class="headerlink" title="常量声明"></a>常量声明</h2><p><strong>常量</strong>，在程序编译阶段就确定下来的值，而程序在运行时无法改变该值。</p>
<p><strong>单个常量声明</strong></p>
<p>第一种：const 变量名称 数据类型 &#x3D; 变量值</p>
<p>如果不赋值，使用的是该数据类型的默认值。</p>
<p>第二种：const 变量名称 &#x3D; 变量值</p>
<p>根据变量值，自行判断数据类型。</p>
<p><strong>多个常量声明</strong></p>
<p>第一种：const 变量名称,变量名称 … ,数据类型 &#x3D; 变量值,变量值 …</p>
<p>第二种：const 变量名称,变量名称 …  &#x3D; 变量值,变量值 …</p>
<p><strong>测试代码</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//demo_1.go</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	const name string = &quot;Tom&quot;</span><br><span class="line">	fmt.Println(name)</span><br><span class="line"></span><br><span class="line">	const age = 30</span><br><span class="line">	fmt.Println(age)</span><br><span class="line"></span><br><span class="line">	const name_1, name_2 string = &quot;Tom&quot;, &quot;Jay&quot;</span><br><span class="line">	fmt.Println(name_1, name_2)</span><br><span class="line"></span><br><span class="line">	const name_3, age_1 = &quot;Tom&quot;, 30</span><br><span class="line">	fmt.Println(name_3, age_1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/xinliangnote/Go/blob/master/00-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/images/02-%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/2_go_1.png"
                     
                ></p>
<h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><p><strong>单个变量声明</strong></p>
<p>第一种：var 变量名称 数据类型 &#x3D; 变量值</p>
<p>如果不赋值，使用的是该数据类型的默认值。</p>
<p>第二种：var 变量名称 &#x3D; 变量值</p>
<p>根据变量值，自行判断数据类型。</p>
<p>第三种：变量名称 :&#x3D; 变量值</p>
<p>省略了 var 和数据类型，变量名称一定要是未声明过的。</p>
<p><strong>多个变量声明</strong></p>
<p>第一种：var 变量名称,变量名称 … ,数据类型 &#x3D; 变量值,变量值 …</p>
<p>第二种：var 变量名称,变量名称 …  &#x3D; 变量值,变量值 …</p>
<p>第三种：变量名称,变量名称 … :&#x3D; 变量值,变量值 …</p>
<p><strong>测试代码</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//demo_2.go</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	var age_1 uint8 = 31</span><br><span class="line">	var age_2 = 32</span><br><span class="line">	age_3 := 33</span><br><span class="line">	fmt.Println(age_1, age_2, age_3)</span><br><span class="line"></span><br><span class="line">	var age_4, age_5, age_6 int = 31, 32, 33</span><br><span class="line">	fmt.Println(age_4, age_5, age_6)</span><br><span class="line"></span><br><span class="line">	var name_1, age_7 = &quot;Tom&quot;, 30</span><br><span class="line">	fmt.Println(name_1, age_7)</span><br><span class="line"></span><br><span class="line">	name_2, is_boy, height := &quot;Jay&quot;, true, 180.66</span><br><span class="line">	fmt.Println(name_2, is_boy, height)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/xinliangnote/Go/blob/master/00-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/images/02-%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/2_go_2.png"
                     
                ></p>
<h2 id="输出方法"><a href="#输出方法" class="headerlink" title="输出方法"></a>输出方法</h2><p><strong>fmt.Print</strong>：输出到控制台（仅只是输出）</p>
<p><strong>fmt.Println</strong>：输出到控制台并换行</p>
<p><strong>fmt.Printf</strong>：仅输出格式化的字符串和字符串变量（整型和整型变量不可以）</p>
<p><strong>fmt.Sprintf</strong>：格式化并返回一个字符串，不输出。</p>
<p>测试代码</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//demo_3.go</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	fmt.Print(&quot;输出到控制台不换行&quot;)</span><br><span class="line">	fmt.Println(&quot;---&quot;)</span><br><span class="line">	fmt.Println(&quot;输出到控制台并换行&quot;)</span><br><span class="line">	fmt.Printf(&quot;name=%s,age=%d\n&quot;, &quot;Tom&quot;, 30)</span><br><span class="line">	fmt.Printf(&quot;name=%s,age=%d,height=%v\n&quot;, &quot;Tom&quot;, 30, fmt.Sprintf(&quot;%.2f&quot;, 180.567))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行结果：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://github.com/xinliangnote/Go/blob/master/00-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/images/02-%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/2_go_3.png"
                     
                ></p>
]]></content>
  </entry>
  <entry>
    <title>site</title>
    <url>/2022/11/26/site/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/11/26/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
</search>
